// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: kUc8557CRXQF

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdButton } from '@plasmicpkgs/antd5/skinny/registerButton'; // plasmic-import: bx9Xzvf5_eu/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrLoad.module.css'; // plasmic-import: kUc8557CRXQF/css

createPlasmicElementProxy;

export type PlasmicGbrLoad__VariantMembers = {};
export type PlasmicGbrLoad__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrLoad__VariantsArgs;
export const PlasmicGbrLoad__VariantProps = new Array<VariantPropType>();

export type PlasmicGbrLoad__ArgsType = {
  loadFile?: () => void;
  clearLoaded?: () => void;
};
type ArgPropType = keyof PlasmicGbrLoad__ArgsType;
export const PlasmicGbrLoad__ArgProps = new Array<ArgPropType>(
  'loadFile',
  'clearLoaded'
);

export type PlasmicGbrLoad__OverridesType = {
  root?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
};

export interface DefaultGbrLoadProps {
  loadFile?: () => void;
  clearLoaded?: () => void;
  className?: string;
}

const $$ = {};

function PlasmicGbrLoad__RenderFunc(props: {
  variants: PlasmicGbrLoad__VariantsArgs;
  args: PlasmicGbrLoad__ArgsType;
  overrides: PlasmicGbrLoad__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={'freeBox'}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AntdButton
          className={classNames('__wab_instance', sty.button___7MPaN)}
          onClick={async () => {
            const $steps = {};
            $steps['runLoadFile'] = true
              ? (() => {
                  const actionArgs = { eventRef: $props['loadFile'] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              typeof $steps['runLoadFile'] === 'object' &&
              typeof $steps['runLoadFile'].then === 'function'
            ) {
              $steps['runLoadFile'] = await $steps['runLoadFile'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__slqSa
            )}
          >
            {'Load File'}
          </div>
        </AntdButton>
        <AntdButton
          className={classNames('__wab_instance', sty.button__e34Zb)}
          onClick={async () => {
            const $steps = {};
            $steps['runClearLoaded'] = true
              ? (() => {
                  const actionArgs = { eventRef: $props['clearLoaded'] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              typeof $steps['runClearLoaded'] === 'object' &&
              typeof $steps['runClearLoaded'].then === 'function'
            ) {
              $steps['runClearLoaded'] = await $steps['runClearLoaded'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rw0F1
            )}
          >
            {'Clear'}
          </div>
        </AntdButton>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'freeBox'],
  freeBox: ['freeBox'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  freeBox: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrLoad__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrLoad__VariantsArgs;
    args?: PlasmicGbrLoad__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrLoad__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrLoad__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrLoad__ArgProps,
          internalVariantPropNames: PlasmicGbrLoad__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrLoad__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrLoad';
  } else {
    func.displayName = `PlasmicGbrLoad.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrLoad = Object.assign(
  // Top-level PlasmicGbrLoad renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent('freeBox'),

    // Metadata about props expected for PlasmicGbrLoad
    internalVariantProps: PlasmicGbrLoad__VariantProps,
    internalArgProps: PlasmicGbrLoad__ArgProps,
  }
);

export default PlasmicGbrLoad;
/* prettier-ignore-end */
