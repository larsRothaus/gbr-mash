// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: 55kApvrAnys1

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';
import * as plasmicAuth from '@plasmicapp/react-web/lib/auth';
import { usePlasmicDataSourceContext } from '@plasmicapp/data-sources-context';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import PageLayout from '../../PageLayout'; // plasmic-import: R1X6uL4350tK/component
import LayerListItem from '../../LayerListItem'; // plasmic-import: 0PZp08sfUB2s/component

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrEditor.module.css'; // plasmic-import: 55kApvrAnys1/css

createPlasmicElementProxy;

export type PlasmicGbrEditor__VariantMembers = {};
export type PlasmicGbrEditor__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrEditor__VariantsArgs;
export const PlasmicGbrEditor__VariantProps = new Array<VariantPropType>();

export type PlasmicGbrEditor__ArgsType = {
  gbrViewer2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicGbrEditor__ArgsType;
export const PlasmicGbrEditor__ArgProps = new Array<ArgPropType>('gbrViewer2');

export type PlasmicGbrEditor__OverridesType = {
  root?: p.Flex<'div'>;
  pageLayout?: p.Flex<typeof PageLayout>;
  columns?: p.Flex<'div'>;
  gbrViewer?: p.Flex<'div'>;
  freeBox?: p.Flex<'div'>;
  layerListItem?: p.Flex<typeof LayerListItem>;
};

export interface DefaultGbrEditorProps {
  gbrViewer2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicGbrEditor__RenderFunc(props: {
  variants: PlasmicGbrEditor__VariantsArgs;
  args: PlasmicGbrEditor__ArgsType;
  overrides: PlasmicGbrEditor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={'root'}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={'pageLayout'}
            data-plasmic-override={overrides.pageLayout}
          >
            <ph.DataCtxReader>
              {($ctx) => (
                <div
                  data-plasmic-name={'columns'}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div className={classNames(projectcss.all, sty.column__tRkl)}>
                    <div
                      data-plasmic-name={'gbrViewer'}
                      data-plasmic-override={overrides.gbrViewer}
                      className={classNames(projectcss.all, sty.gbrViewer)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qgPw
                            )}
                          >
                            {"I DON'T GET THIS"}
                          </div>
                        ),
                        value: args.gbrViewer2,
                      })}
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__v32Cc)}
                  >
                    <div
                      data-plasmic-name={'freeBox'}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      {((_par) =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])([
                        2, 3, 4,
                      ]).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <LayerListItem
                            data-plasmic-name={'layerListItem'}
                            data-plasmic-override={overrides.layerListItem}
                            className={classNames(
                              '__wab_instance',
                              sty.layerListItem
                            )}
                            key={currentIndex}
                          />
                        );
                      })}
                    </div>
                  </div>
                </div>
              )}
            </ph.DataCtxReader>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'pageLayout',
    'columns',
    'gbrViewer',
    'freeBox',
    'layerListItem',
  ],
  pageLayout: [
    'pageLayout',
    'columns',
    'gbrViewer',
    'freeBox',
    'layerListItem',
  ],
  columns: ['columns', 'gbrViewer', 'freeBox', 'layerListItem'],
  gbrViewer: ['gbrViewer'],
  freeBox: ['freeBox', 'layerListItem'],
  layerListItem: ['layerListItem'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  pageLayout: typeof PageLayout;
  columns: 'div';
  gbrViewer: 'div';
  freeBox: 'div';
  layerListItem: typeof LayerListItem;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrEditor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrEditor__VariantsArgs;
    args?: PlasmicGbrEditor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrEditor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrEditor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrEditor__ArgProps,
          internalVariantPropNames: PlasmicGbrEditor__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrEditor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrEditor';
  } else {
    func.displayName = `PlasmicGbrEditor.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = (props) => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={'dgFPhDvLY4vKuXTDNeS2uD'}
      authorizeEndpoint={'https://studio.plasmic.app/authorize'}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = (props) => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: 'dgFPhDvLY4vKuXTDNeS2uD',
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user,
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicGbrEditor = Object.assign(
  // Top-level PlasmicGbrEditor renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent('root'))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent('pageLayout'),
    columns: makeNodeComponent('columns'),
    gbrViewer: makeNodeComponent('gbrViewer'),
    freeBox: makeNodeComponent('freeBox'),
    layerListItem: makeNodeComponent('layerListItem'),

    // Metadata about props expected for PlasmicGbrEditor
    internalVariantProps: PlasmicGbrEditor__VariantProps,
    internalArgProps: PlasmicGbrEditor__ArgProps,

    // Page metadata
    pageMetadata: {
      title: '',
      description: '',
      ogImageSrc: '',
      canonical: '',
    },
  }
);

export default PlasmicGbrEditor;
/* prettier-ignore-end */
