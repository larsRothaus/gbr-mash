// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: paGL4XKTn0Fb

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdSelect } from '@plasmicpkgs/antd5/skinny/registerSelect'; // plasmic-import: OvH7ENd3m7ug/codeComponent
import { AntdInput } from '@plasmicpkgs/antd5/skinny/registerInput'; // plasmic-import: Vf5hntD2SZ5/codeComponent
import { inputHelpers as AntdInput_Helpers } from '@plasmicpkgs/antd5/skinny/registerInput'; // plasmic-import: Vf5hntD2SZ5/codeComponentHelper

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from '../plasmic_rich_components/plasmic_plasmic_rich_components.module.css'; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicNodeItem.module.css'; // plasmic-import: paGL4XKTn0Fb/css

createPlasmicElementProxy;

export type PlasmicNodeItem__VariantMembers = {};
export type PlasmicNodeItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicNodeItem__VariantsArgs;
export const PlasmicNodeItem__VariantProps = new Array<VariantPropType>();

export type PlasmicNodeItem__ArgsType = {};
type ArgPropType = keyof PlasmicNodeItem__ArgsType;
export const PlasmicNodeItem__ArgProps = new Array<ArgPropType>();

export type PlasmicNodeItem__OverridesType = {
  root?: p.Flex<'div'>;
  select?: p.Flex<typeof AntdSelect>;
  xs?: p.Flex<typeof AntdInput>;
  xs2?: p.Flex<typeof AntdInput>;
  xs3?: p.Flex<typeof AntdInput>;
};

export interface DefaultNodeItemProps {
  className?: string;
}

const $$ = {};

function PlasmicNodeItem__RenderFunc(props: {
  variants: PlasmicNodeItem__VariantsArgs;
  args: PlasmicNodeItem__ArgsType;
  overrides: PlasmicNodeItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'select.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'xs.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec('value', AntdInput_Helpers),
      },
      {
        path: 'xs2.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec('value', AntdInput_Helpers),
      },
      {
        path: 'xs3.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: p.generateOnMutateForSpec('value', AntdInput_Helpers),
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__lSfiy
        )}
      >
        {'Node Type:'}
      </div>
      <AntdSelect
        data-plasmic-name={'select'}
        data-plasmic-override={overrides.select}
        className={classNames('__wab_instance', sty.select)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        onChange={p.generateStateOnChangeProp($state, ['select', 'value'])}
        options={[
          { value: 'option1', label: 'Option 1', type: 'option' },
          { value: 'option2', label: 'Option 2', type: 'option' },
        ]}
        placeholder={'Select...'}
        popupScopeClassName={sty['select__popup']}
        value={p.generateStateValueProp($state, ['select', 'value'])}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__mqE2E
        )}
      >
        {'Node Type: '}
      </div>
      {(() => {
        const child$Props = {
          className: classNames('__wab_instance', sty.xs),
          onChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            'value',
            ['xs', 'value'],
            AntdInput_Helpers
          ),
          value: p.generateStateValueProp($state, ['xs', 'value']),
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: 'value',
              plasmicStateName: 'xs.value',
            },
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={'xs'}
            data-plasmic-override={overrides.xs}
            {...child$Props}
          />
        );
      })()}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__aei1
        )}
      >
        {'Node Type: '}
      </div>
      {(() => {
        const child$Props = {
          className: classNames('__wab_instance', sty.xs2),
          onChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            'value',
            ['xs2', 'value'],
            AntdInput_Helpers
          ),
          value: p.generateStateValueProp($state, ['xs2', 'value']),
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: 'value',
              plasmicStateName: 'xs2.value',
            },
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={'xs2'}
            data-plasmic-override={overrides.xs2}
            {...child$Props}
          />
        );
      })()}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__stMr2
        )}
      >
        {'Node Type: '}
      </div>
      {(() => {
        const child$Props = {
          className: classNames('__wab_instance', sty.xs3),
          onChange: p.generateStateOnChangePropForCodeComponents(
            $state,
            'value',
            ['xs3', 'value'],
            AntdInput_Helpers
          ),
          value: p.generateStateValueProp($state, ['xs3', 'value']),
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: 'value',
              plasmicStateName: 'xs3.value',
            },
          ],
          [],
          AntdInput_Helpers ?? {},
          child$Props
        );

        return (
          <AntdInput
            data-plasmic-name={'xs3'}
            data-plasmic-override={overrides.xs3}
            {...child$Props}
          />
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'select', 'xs', 'xs2', 'xs3'],
  select: ['select'],
  xs: ['xs'],
  xs2: ['xs2'],
  xs3: ['xs3'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  select: typeof AntdSelect;
  xs: typeof AntdInput;
  xs2: typeof AntdInput;
  xs3: typeof AntdInput;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNodeItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNodeItem__VariantsArgs;
    args?: PlasmicNodeItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNodeItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNodeItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNodeItem__ArgProps,
          internalVariantPropNames: PlasmicNodeItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicNodeItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicNodeItem';
  } else {
    func.displayName = `PlasmicNodeItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNodeItem = Object.assign(
  // Top-level PlasmicNodeItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent('select'),
    xs: makeNodeComponent('xs'),
    xs2: makeNodeComponent('xs2'),
    xs3: makeNodeComponent('xs3'),

    // Metadata about props expected for PlasmicNodeItem
    internalVariantProps: PlasmicNodeItem__VariantProps,
    internalArgProps: PlasmicNodeItem__ArgProps,
  }
);

export default PlasmicNodeItem;
/* prettier-ignore-end */
