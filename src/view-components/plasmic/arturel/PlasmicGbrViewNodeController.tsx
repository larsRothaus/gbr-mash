// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: xDqDP0kwNAZW

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from '../plasmic_rich_components/plasmic_plasmic_rich_components.module.css'; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrViewNodeController.module.css'; // plasmic-import: xDqDP0kwNAZW/css

createPlasmicElementProxy;

export type PlasmicGbrViewNodeController__VariantMembers = {};
export type PlasmicGbrViewNodeController__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrViewNodeController__VariantsArgs;
export const PlasmicGbrViewNodeController__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGbrViewNodeController__ArgsType = {};
type ArgPropType = keyof PlasmicGbrViewNodeController__ArgsType;
export const PlasmicGbrViewNodeController__ArgProps = new Array<ArgPropType>();

export type PlasmicGbrViewNodeController__OverridesType = {
  root?: p.Flex<'div'>;
};

export interface DefaultGbrViewNodeControllerProps {
  className?: string;
}

const $$ = {};

function PlasmicGbrViewNodeController__RenderFunc(props: {
  variants: PlasmicGbrViewNodeController__VariantsArgs;
  args: PlasmicGbrViewNodeController__ArgsType;
  overrides: PlasmicGbrViewNodeController__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__httPx)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ls3Hs
          )}
        >
          {'ID:'}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0Sue
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.gbrNode.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === 'PlasmicUndefinedDataError'
                ) {
                  return 'No Selected';
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___1AwA5)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lxby6
          )}
        >
          {'Start '}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bW0N
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.gbrNode.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === 'PlasmicUndefinedDataError'
                ) {
                  return 'No Selected';
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__drrZp)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hrkRv
          )}
        >
          {'Start '}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jeFzF
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.gbrNode.id;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === 'PlasmicUndefinedDataError'
                ) {
                  return 'No Selected';
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrViewNodeController__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrViewNodeController__VariantsArgs;
    args?: PlasmicGbrViewNodeController__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrViewNodeController__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrViewNodeController__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrViewNodeController__ArgProps,
          internalVariantPropNames: PlasmicGbrViewNodeController__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrViewNodeController__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrViewNodeController';
  } else {
    func.displayName = `PlasmicGbrViewNodeController.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrViewNodeController = Object.assign(
  // Top-level PlasmicGbrViewNodeController renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicGbrViewNodeController
    internalVariantProps: PlasmicGbrViewNodeController__VariantProps,
    internalArgProps: PlasmicGbrViewNodeController__ArgProps,
  }
);

export default PlasmicGbrViewNodeController;
/* prettier-ignore-end */
