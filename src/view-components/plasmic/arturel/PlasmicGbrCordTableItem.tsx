// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: nMXkst29F9gX

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrCordTableItem.module.css'; // plasmic-import: nMXkst29F9gX/css

createPlasmicElementProxy;

export type PlasmicGbrCordTableItem__VariantMembers = {};
export type PlasmicGbrCordTableItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrCordTableItem__VariantsArgs;
export const PlasmicGbrCordTableItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGbrCordTableItem__ArgsType = {};
type ArgPropType = keyof PlasmicGbrCordTableItem__ArgsType;
export const PlasmicGbrCordTableItem__ArgProps = new Array<ArgPropType>();

export type PlasmicGbrCordTableItem__OverridesType = {
  root?: p.Flex<'div'>;
  columns?: p.Flex<'div'>;
};

export interface DefaultGbrCordTableItemProps {
  className?: string;
}

const $$ = {};

function PlasmicGbrCordTableItem__RenderFunc(props: {
  variants: PlasmicGbrCordTableItem__VariantsArgs;
  args: PlasmicGbrCordTableItem__ArgsType;
  overrides: PlasmicGbrCordTableItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={'columns'}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__bGmlf)} />

        <div className={classNames(projectcss.all, sty.column__gYuzg)} />

        <div className={classNames(projectcss.all, sty.column__zcpsU)} />

        <div className={classNames(projectcss.all, sty.column__cvlZs)} />

        <div className={classNames(projectcss.all, sty.column__xzJTn)} />

        <div className={classNames(projectcss.all, sty.column__wzx5H)} />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'columns'],
  columns: ['columns'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  columns: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrCordTableItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrCordTableItem__VariantsArgs;
    args?: PlasmicGbrCordTableItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrCordTableItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrCordTableItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrCordTableItem__ArgProps,
          internalVariantPropNames: PlasmicGbrCordTableItem__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrCordTableItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrCordTableItem';
  } else {
    func.displayName = `PlasmicGbrCordTableItem.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrCordTableItem = Object.assign(
  // Top-level PlasmicGbrCordTableItem renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent('columns'),

    // Metadata about props expected for PlasmicGbrCordTableItem
    internalVariantProps: PlasmicGbrCordTableItem__VariantProps,
    internalArgProps: PlasmicGbrCordTableItem__ArgProps,
  }
);

export default PlasmicGbrCordTableItem;
/* prettier-ignore-end */
