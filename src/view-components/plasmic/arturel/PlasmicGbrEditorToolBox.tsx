// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: 3fSRvGY02nPI

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdButton } from '@plasmicpkgs/antd5/skinny/registerButton'; // plasmic-import: bx9Xzvf5_eu/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrEditorToolBox.module.css'; // plasmic-import: 3fSRvGY02nPI/css

createPlasmicElementProxy;

export type PlasmicGbrEditorToolBox__VariantMembers = {};
export type PlasmicGbrEditorToolBox__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrEditorToolBox__VariantsArgs;
export const PlasmicGbrEditorToolBox__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGbrEditorToolBox__ArgsType = {
  deselectAction?: () => void;
  joinSelected?: () => void;
  removeMoveNodes?: () => void;
  reverseNode?: () => void;
  generateToolPath?: () => void;
  saveFile?: () => void;
};
type ArgPropType = keyof PlasmicGbrEditorToolBox__ArgsType;
export const PlasmicGbrEditorToolBox__ArgProps = new Array<ArgPropType>(
  'deselectAction',
  'joinSelected',
  'removeMoveNodes',
  'reverseNode',
  'generateToolPath',
  'saveFile'
);

export type PlasmicGbrEditorToolBox__OverridesType = {
  root?: p.Flex<'div'>;
  deselect?: p.Flex<typeof AntdButton>;
  deselect2?: p.Flex<typeof AntdButton>;
  deselect3?: p.Flex<typeof AntdButton>;
  deselect4?: p.Flex<typeof AntdButton>;
  deselect5?: p.Flex<typeof AntdButton>;
  deselect6?: p.Flex<typeof AntdButton>;
};

export interface DefaultGbrEditorToolBoxProps {
  deselectAction?: () => void;
  joinSelected?: () => void;
  removeMoveNodes?: () => void;
  reverseNode?: () => void;
  generateToolPath?: () => void;
  saveFile?: () => void;
  className?: string;
}

function PlasmicGbrEditorToolBox__RenderFunc(props: {
  variants: PlasmicGbrEditorToolBox__VariantsArgs;
  args: PlasmicGbrEditorToolBox__ArgsType;
  overrides: PlasmicGbrEditorToolBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdButton
        data-plasmic-name={'deselect'}
        data-plasmic-override={overrides.deselect}
        className={classNames('__wab_instance', sty.deselect)}
        onClick={async () => {
          const $steps = {};
          $steps['runDeselectAction'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['deselectAction'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runDeselectAction'] === 'object' &&
            typeof $steps['runDeselectAction'].then === 'function'
          ) {
            $steps['runDeselectAction'] = await $steps['runDeselectAction'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__h6Ft1
          )}
        >
          {'deselect all'}
        </div>
      </AntdButton>
      <AntdButton
        data-plasmic-name={'deselect2'}
        data-plasmic-override={overrides.deselect2}
        className={classNames('__wab_instance', sty.deselect2)}
        onClick={async () => {
          const $steps = {};
          $steps['runJoinSelected'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['joinSelected'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runJoinSelected'] === 'object' &&
            typeof $steps['runJoinSelected'].then === 'function'
          ) {
            $steps['runJoinSelected'] = await $steps['runJoinSelected'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__r7Ljo
          )}
        >
          {'join'}
        </div>
      </AntdButton>
      <AntdButton
        data-plasmic-name={'deselect3'}
        data-plasmic-override={overrides.deselect3}
        className={classNames('__wab_instance', sty.deselect3)}
        onClick={async () => {
          const $steps = {};
          $steps['runRemoveMoveNodes'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['removeMoveNodes'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runRemoveMoveNodes'] === 'object' &&
            typeof $steps['runRemoveMoveNodes'].then === 'function'
          ) {
            $steps['runRemoveMoveNodes'] = await $steps['runRemoveMoveNodes'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__aqSdn
          )}
        >
          {'remote moves'}
        </div>
      </AntdButton>
      <AntdButton
        data-plasmic-name={'deselect4'}
        data-plasmic-override={overrides.deselect4}
        className={classNames('__wab_instance', sty.deselect4)}
        onClick={async () => {
          const $steps = {};
          $steps['runReverseNode'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['reverseNode'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runReverseNode'] === 'object' &&
            typeof $steps['runReverseNode'].then === 'function'
          ) {
            $steps['runReverseNode'] = await $steps['runReverseNode'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___998S6
          )}
        >
          {'reverse'}
        </div>
      </AntdButton>
      <AntdButton
        data-plasmic-name={'deselect5'}
        data-plasmic-override={overrides.deselect5}
        className={classNames('__wab_instance', sty.deselect5)}
        onClick={async () => {
          const $steps = {};
          $steps['runGenerateToolPath'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['generateToolPath'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runGenerateToolPath'] === 'object' &&
            typeof $steps['runGenerateToolPath'].then === 'function'
          ) {
            $steps['runGenerateToolPath'] = await $steps['runGenerateToolPath'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cXzYq
          )}
        >
          {'generate tool path'}
        </div>
      </AntdButton>
      <AntdButton
        data-plasmic-name={'deselect6'}
        data-plasmic-override={overrides.deselect6}
        className={classNames('__wab_instance', sty.deselect6)}
        onClick={async () => {
          const $steps = {};
          $steps['runSaveFile'] = true
            ? (() => {
                const actionArgs = { eventRef: $props['saveFile'] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            typeof $steps['runSaveFile'] === 'object' &&
            typeof $steps['runSaveFile'].then === 'function'
          ) {
            $steps['runSaveFile'] = await $steps['runSaveFile'];
          }
        }}
        type={'ghost'}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9RcV
          )}
        >
          {'Save File'}
        </div>
      </AntdButton>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    'root',
    'deselect',
    'deselect2',
    'deselect3',
    'deselect4',
    'deselect5',
    'deselect6',
  ],
  deselect: ['deselect'],
  deselect2: ['deselect2'],
  deselect3: ['deselect3'],
  deselect4: ['deselect4'],
  deselect5: ['deselect5'],
  deselect6: ['deselect6'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  deselect: typeof AntdButton;
  deselect2: typeof AntdButton;
  deselect3: typeof AntdButton;
  deselect4: typeof AntdButton;
  deselect5: typeof AntdButton;
  deselect6: typeof AntdButton;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrEditorToolBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrEditorToolBox__VariantsArgs;
    args?: PlasmicGbrEditorToolBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrEditorToolBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrEditorToolBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrEditorToolBox__ArgProps,
          internalVariantPropNames: PlasmicGbrEditorToolBox__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrEditorToolBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrEditorToolBox';
  } else {
    func.displayName = `PlasmicGbrEditorToolBox.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrEditorToolBox = Object.assign(
  // Top-level PlasmicGbrEditorToolBox renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    deselect: makeNodeComponent('deselect'),
    deselect2: makeNodeComponent('deselect2'),
    deselect3: makeNodeComponent('deselect3'),
    deselect4: makeNodeComponent('deselect4'),
    deselect5: makeNodeComponent('deselect5'),
    deselect6: makeNodeComponent('deselect6'),

    // Metadata about props expected for PlasmicGbrEditorToolBox
    internalVariantProps: PlasmicGbrEditorToolBox__VariantProps,
    internalArgProps: PlasmicGbrEditorToolBox__ArgProps,
  }
);

export default PlasmicGbrEditorToolBox;
/* prettier-ignore-end */
