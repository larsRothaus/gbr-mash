// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: 6Gd6KrI9lbix

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdDropdown } from '@plasmicpkgs/antd5/skinny/registerDropdown'; // plasmic-import: zIDEYq9RgLG/codeComponent
import { AntdMenuItem } from '@plasmicpkgs/antd5/skinny/registerMenu'; // plasmic-import: QSmezaW-Gyu/codeComponent
import { AntdButton } from '@plasmicpkgs/antd5/skinny/registerButton'; // plasmic-import: bx9Xzvf5_eu/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbtToolBar.module.css'; // plasmic-import: 6Gd6KrI9lbix/css

createPlasmicElementProxy;

export type PlasmicGbtToolBar__VariantMembers = {};
export type PlasmicGbtToolBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbtToolBar__VariantsArgs;
export const PlasmicGbtToolBar__VariantProps = new Array<VariantPropType>();

export type PlasmicGbtToolBar__ArgsType = {};
type ArgPropType = keyof PlasmicGbtToolBar__ArgsType;
export const PlasmicGbtToolBar__ArgProps = new Array<ArgPropType>();

export type PlasmicGbtToolBar__OverridesType = {
  root?: p.Flex<'div'>;
  dropdown?: p.Flex<typeof AntdDropdown>;
  button?: p.Flex<typeof AntdButton>;
};

export interface DefaultGbtToolBarProps {
  className?: string;
}

const $$ = {};

function PlasmicGbtToolBar__RenderFunc(props: {
  variants: PlasmicGbtToolBar__VariantsArgs;
  args: PlasmicGbtToolBar__ArgsType;
  overrides: PlasmicGbtToolBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdDropdown
        data-plasmic-name={'dropdown'}
        data-plasmic-override={overrides.dropdown}
        className={classNames('__wab_instance', sty.dropdown)}
        dropdownMenuScopeClassName={sty['dropdown__dropdownMenu']}
        menuItems={() => (
          <React.Fragment>
            <AntdMenuItem
              className={classNames('__wab_instance', sty.menuItem__bk9DM)}
              key={'menu-item-1'}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dETi
                )}
              >
                {'Menu item'}
              </div>
            </AntdMenuItem>
            <AntdMenuItem
              className={classNames('__wab_instance', sty.menuItem___0WIuL)}
              key={'menu-item-2'}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w1Ni6
                )}
              >
                {'Menu item'}
              </div>
            </AntdMenuItem>
          </React.Fragment>
        )}
        menuItemsJson={[
          { type: 'item', value: 'action1', label: 'Action 1' },
          { type: 'item', value: 'action2', label: 'Action 2' },
        ]}
      >
        <AntdButton
          data-plasmic-name={'button'}
          data-plasmic-override={overrides.button}
          className={classNames('__wab_instance', sty.button)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__s3DAg
            )}
          >
            {'Dropdown'}
          </div>
        </AntdButton>
      </AntdDropdown>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'dropdown', 'button'],
  dropdown: ['dropdown', 'button'],
  button: ['button'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  dropdown: typeof AntdDropdown;
  button: typeof AntdButton;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbtToolBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbtToolBar__VariantsArgs;
    args?: PlasmicGbtToolBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbtToolBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbtToolBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbtToolBar__ArgProps,
          internalVariantPropNames: PlasmicGbtToolBar__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbtToolBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbtToolBar';
  } else {
    func.displayName = `PlasmicGbtToolBar.${nodeName}`;
  }
  return func;
}

export const PlasmicGbtToolBar = Object.assign(
  // Top-level PlasmicGbtToolBar renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    dropdown: makeNodeComponent('dropdown'),
    button: makeNodeComponent('button'),

    // Metadata about props expected for PlasmicGbtToolBar
    internalVariantProps: PlasmicGbtToolBar__VariantProps,
    internalArgProps: PlasmicGbtToolBar__ArgProps,
  }
);

export default PlasmicGbtToolBar;
/* prettier-ignore-end */
