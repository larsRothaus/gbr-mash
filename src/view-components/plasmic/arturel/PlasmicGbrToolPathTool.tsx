// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: yPi8m4SnU-qf

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdSwitch } from '@plasmicpkgs/antd5/skinny/registerSwitch'; // plasmic-import: -gkBqPikhk/codeComponent
import { AntdButton } from '@plasmicpkgs/antd5/skinny/registerButton'; // plasmic-import: bx9Xzvf5_eu/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from '../plasmic_rich_components/plasmic_plasmic_rich_components.module.css'; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrToolPathTool.module.css'; // plasmic-import: yPi8m4SnU-qf/css

createPlasmicElementProxy;

export type PlasmicGbrToolPathTool__VariantMembers = {
  confirmationPopOver: 'confirmationPopOver';
};
export type PlasmicGbrToolPathTool__VariantsArgs = {
  confirmationPopOver?: SingleBooleanChoiceArg<'confirmationPopOver'>;
};
type VariantPropType = keyof PlasmicGbrToolPathTool__VariantsArgs;
export const PlasmicGbrToolPathTool__VariantProps = new Array<VariantPropType>(
  'confirmationPopOver'
);

export type PlasmicGbrToolPathTool__ArgsType = {
  toolPathModeChanged?: (toolPathMode: boolean) => void;
  removeExistingToolPath?: () => void;
  generateToolPath?: (includeFrames: boolean) => void;
  showFrames?: (show: boolean) => void;
  saveDesign?: () => void;
  saveFrames?: () => void;
  makeUnidirectional?: () => void;
};
type ArgPropType = keyof PlasmicGbrToolPathTool__ArgsType;
export const PlasmicGbrToolPathTool__ArgProps = new Array<ArgPropType>(
  'toolPathModeChanged',
  'removeExistingToolPath',
  'generateToolPath',
  'showFrames',
  'saveDesign',
  'saveFrames',
  'makeUnidirectional'
);

export type PlasmicGbrToolPathTool__OverridesType = {
  root?: p.Flex<'div'>;
  toolPathMode?: p.Flex<typeof AntdSwitch>;
  showFrames?: p.Flex<typeof AntdSwitch>;
  includeFrames?: p.Flex<typeof AntdSwitch>;
  confirmation?: p.Flex<'div'>;
};

export interface DefaultGbrToolPathToolProps {
  toolPathModeChanged?: (toolPathMode: boolean) => void;
  removeExistingToolPath?: () => void;
  generateToolPath?: (includeFrames: boolean) => void;
  showFrames?: (show: boolean) => void;
  saveDesign?: () => void;
  saveFrames?: () => void;
  makeUnidirectional?: () => void;
  confirmationPopOver?: SingleBooleanChoiceArg<'confirmationPopOver'>;
  className?: string;
}

const $$ = {};

function PlasmicGbrToolPathTool__RenderFunc(props: {
  variants: PlasmicGbrToolPathTool__VariantsArgs;
  args: PlasmicGbrToolPathTool__ArgsType;
  overrides: PlasmicGbrToolPathTool__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'toolPathMode.checked',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'showFrames.checked',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => true,
      },
      {
        path: 'includeFrames.checked',
        type: 'private',
        variableType: 'boolean',
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
      },
      {
        path: 'confirmationPopOver',
        type: 'private',
        variableType: 'variant',
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.confirmationPopOver,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootconfirmationPopOver]: hasVariant(
            $state,
            'confirmationPopOver',
            'confirmationPopOver'
          ),
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ipg69)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yfwg6
          )}
        >
          {'Activate Toolpath Mode'}
        </div>
        <AntdSwitch
          data-plasmic-name={'toolPathMode'}
          data-plasmic-override={overrides.toolPathMode}
          checked={p.generateStateValueProp($state, [
            'toolPathMode',
            'checked',
          ])}
          className={classNames('__wab_instance', sty.toolPathMode)}
          onChange={async (...eventArgs: any) => {
            p.generateStateOnChangeProp($state, [
              'toolPathMode',
              'checked',
            ]).apply(null, eventArgs);
            (async (checked) => {
              const $steps = {};

              $steps['runToolPathModeChanged'] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props['toolPathModeChanged'],
                      args: [
                        (() => {
                          try {
                            return $state.toolPathMode.checked;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === 'PlasmicUndefinedDataError'
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                      ],
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['runToolPathModeChanged'] != null &&
                typeof $steps['runToolPathModeChanged'] === 'object' &&
                typeof $steps['runToolPathModeChanged'].then === 'function'
              ) {
                $steps['runToolPathModeChanged'] = await $steps[
                  'runToolPathModeChanged'
                ];
              }
            }).apply(null, eventArgs);
          }}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zavuY)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cPdG
          )}
        >
          {'Show Frames'}
        </div>
        <AntdSwitch
          data-plasmic-name={'showFrames'}
          data-plasmic-override={overrides.showFrames}
          checked={p.generateStateValueProp($state, ['showFrames', 'checked'])}
          className={classNames('__wab_instance', sty.showFrames)}
          defaultChecked={true}
          onChange={async (...eventArgs: any) => {
            p.generateStateOnChangeProp($state, [
              'showFrames',
              'checked',
            ]).apply(null, eventArgs);
            (async (checked) => {
              const $steps = {};

              $steps['runShowFrames'] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props['showFrames'],
                      args: [
                        (() => {
                          try {
                            return $state.showFrames.checked;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === 'PlasmicUndefinedDataError'
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                      ],
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['runShowFrames'] != null &&
                typeof $steps['runShowFrames'] === 'object' &&
                typeof $steps['runShowFrames'].then === 'function'
              ) {
                $steps['runShowFrames'] = await $steps['runShowFrames'];
              }
            }).apply(null, eventArgs);
          }}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___7VFcP)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xnVw6
          )}
        >
          {'Include frames in tool-path'}
        </div>
        <AntdSwitch
          data-plasmic-name={'includeFrames'}
          data-plasmic-override={overrides.includeFrames}
          checked={p.generateStateValueProp($state, [
            'includeFrames',
            'checked',
          ])}
          className={classNames('__wab_instance', sty.includeFrames)}
          onChange={p.generateStateOnChangeProp($state, [
            'includeFrames',
            'checked',
          ])}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___5PwX)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pK5Z8
          )}
        >
          {'Make tool-path '}
        </div>
        <AntdButton
          className={classNames('__wab_instance', sty.button__aSrOb)}
          onClick={async () => {
            const $steps = {};

            $steps['updateConfirmationPopOver'] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: 'confirmationPopOver',
                    operation: 4,
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === 'string') {
                      value = [value];
                    }

                    p.set($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['updateConfirmationPopOver'] != null &&
              typeof $steps['updateConfirmationPopOver'] === 'object' &&
              typeof $steps['updateConfirmationPopOver'].then === 'function'
            ) {
              $steps['updateConfirmationPopOver'] = await $steps[
                'updateConfirmationPopOver'
              ];
            }
          }}
          size={'small'}
          type={'primary'}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__kefKq
            )}
          >
            <React.Fragment>
              <span
                className={'plasmic_default__all plasmic_default__span'}
                style={{ fontWeight: 700 }}
              >
                {'unidirectional'}
              </span>
            </React.Fragment>
          </div>
        </AntdButton>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__k9Mac)}>
        <AntdButton
          className={classNames('__wab_instance', sty.button__r2Obz)}
          disabled={(() => {
            try {
              return !$state.toolPathMode.checked;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === 'PlasmicUndefinedDataError'
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          onClick={async () => {
            const $steps = {};

            $steps['runGenerateToolPath'] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props['generateToolPath'],
                    args: [undefined],
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['runGenerateToolPath'] != null &&
              typeof $steps['runGenerateToolPath'] === 'object' &&
              typeof $steps['runGenerateToolPath'].then === 'function'
            ) {
              $steps['runGenerateToolPath'] = await $steps[
                'runGenerateToolPath'
              ];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4Ljlg
            )}
          >
            {'generateToolPath'}
          </div>
        </AntdButton>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___2WhmB)}>
        <AntdButton
          className={classNames('__wab_instance', sty.button___222V)}
          onClick={async () => {
            const $steps = {};

            $steps['runRemoveExistingToolPath'] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props['removeExistingToolPath'],
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['runRemoveExistingToolPath'] != null &&
              typeof $steps['runRemoveExistingToolPath'] === 'object' &&
              typeof $steps['runRemoveExistingToolPath'].then === 'function'
            ) {
              $steps['runRemoveExistingToolPath'] = await $steps[
                'runRemoveExistingToolPath'
              ];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z6C9P
            )}
          >
            {'Remove existing ToolPath'}
          </div>
        </AntdButton>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___7NPd6)}>
        <AntdButton
          className={classNames('__wab_instance', sty.button__yapZs)}
          onClick={async () => {
            const $steps = {};

            $steps['runSaveDesign'] = true
              ? (() => {
                  const actionArgs = { eventRef: $props['saveDesign'] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['runSaveDesign'] != null &&
              typeof $steps['runSaveDesign'] === 'object' &&
              typeof $steps['runSaveDesign'].then === 'function'
            ) {
              $steps['runSaveDesign'] = await $steps['runSaveDesign'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hwQ1
            )}
          >
            {'Save Design'}
          </div>
        </AntdButton>
        <AntdButton
          className={classNames('__wab_instance', sty.button__c7E3)}
          onClick={async () => {
            const $steps = {};

            $steps['runSaveFrames'] = true
              ? (() => {
                  const actionArgs = { eventRef: $props['saveFrames'] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps['runSaveFrames'] != null &&
              typeof $steps['runSaveFrames'] === 'object' &&
              typeof $steps['runSaveFrames'].then === 'function'
            ) {
              $steps['runSaveFrames'] = await $steps['runSaveFrames'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1SMl9
            )}
          >
            {'Save Frame'}
          </div>
        </AntdButton>
      </div>
      <div
        data-plasmic-name={'confirmation'}
        data-plasmic-override={overrides.confirmation}
        className={classNames(projectcss.all, sty.confirmation, {
          [sty.confirmationconfirmationPopOver]: hasVariant(
            $state,
            'confirmationPopOver',
            'confirmationPopOver'
          ),
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__iEAe
          )}
        >
          {'Are you sure you ?'}
        </div>
        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sTQp)}
        >
          <AntdButton
            className={classNames('__wab_instance', sty.button__c79On)}
            onClick={async () => {
              const $steps = {};

              $steps['updateConfirmationPopOver'] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: 'confirmationPopOver',
                      operation: 6,
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === 'string') {
                        value = [value];
                      }

                      p.set($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['updateConfirmationPopOver'] != null &&
                typeof $steps['updateConfirmationPopOver'] === 'object' &&
                typeof $steps['updateConfirmationPopOver'].then === 'function'
              ) {
                $steps['updateConfirmationPopOver'] = await $steps[
                  'updateConfirmationPopOver'
                ];
              }

              $steps['runMakeUnidirectional'] = true
                ? (() => {
                    const actionArgs = {
                      eventRef: $props['makeUnidirectional'],
                    };
                    return (({ eventRef, args }) => {
                      return eventRef?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['runMakeUnidirectional'] != null &&
                typeof $steps['runMakeUnidirectional'] === 'object' &&
                typeof $steps['runMakeUnidirectional'].then === 'function'
              ) {
                $steps['runMakeUnidirectional'] = await $steps[
                  'runMakeUnidirectional'
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iDeCz
              )}
            >
              {'Sure'}
            </div>
          </AntdButton>
          <AntdButton
            className={classNames('__wab_instance', sty.button___2OGzk)}
            onClick={async () => {
              const $steps = {};

              $steps['updateConfirmationPopOver'] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: 'confirmationPopOver',
                      operation: 6,
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === 'string') {
                        value = [value];
                      }

                      p.set($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps['updateConfirmationPopOver'] != null &&
                typeof $steps['updateConfirmationPopOver'] === 'object' &&
                typeof $steps['updateConfirmationPopOver'].then === 'function'
              ) {
                $steps['updateConfirmationPopOver'] = await $steps[
                  'updateConfirmationPopOver'
                ];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gUnb6
              )}
            >
              {'Fuck NO!'}
            </div>
          </AntdButton>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'toolPathMode', 'showFrames', 'includeFrames', 'confirmation'],
  toolPathMode: ['toolPathMode'],
  showFrames: ['showFrames'],
  includeFrames: ['includeFrames'],
  confirmation: ['confirmation'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  toolPathMode: typeof AntdSwitch;
  showFrames: typeof AntdSwitch;
  includeFrames: typeof AntdSwitch;
  confirmation: 'div';
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrToolPathTool__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrToolPathTool__VariantsArgs;
    args?: PlasmicGbrToolPathTool__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrToolPathTool__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrToolPathTool__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrToolPathTool__ArgProps,
          internalVariantPropNames: PlasmicGbrToolPathTool__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrToolPathTool__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrToolPathTool';
  } else {
    func.displayName = `PlasmicGbrToolPathTool.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrToolPathTool = Object.assign(
  // Top-level PlasmicGbrToolPathTool renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    toolPathMode: makeNodeComponent('toolPathMode'),
    showFrames: makeNodeComponent('showFrames'),
    includeFrames: makeNodeComponent('includeFrames'),
    confirmation: makeNodeComponent('confirmation'),

    // Metadata about props expected for PlasmicGbrToolPathTool
    internalVariantProps: PlasmicGbrToolPathTool__VariantProps,
    internalArgProps: PlasmicGbrToolPathTool__ArgProps,
  }
);

export default PlasmicGbrToolPathTool;
/* prettier-ignore-end */
