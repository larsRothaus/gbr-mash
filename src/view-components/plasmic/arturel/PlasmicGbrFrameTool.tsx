// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dgFPhDvLY4vKuXTDNeS2uD
// Component: EtaPIGcLwHv0

import * as React from 'react';

import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/react-web/lib/host';

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from '@plasmicapp/react-web';
import { AntdInputNumber } from '@plasmicpkgs/antd5/skinny/registerInput'; // plasmic-import: wxD5qjEe3pU/codeComponent
import { AntdButton } from '@plasmicpkgs/antd5/skinny/registerButton'; // plasmic-import: bx9Xzvf5_eu/codeComponent
import { AntdDropdown } from '@plasmicpkgs/antd5/skinny/registerDropdown'; // plasmic-import: zIDEYq9RgLG/codeComponent
import { AntdMenuItem } from '@plasmicpkgs/antd5/skinny/registerMenu'; // plasmic-import: QSmezaW-Gyu/codeComponent

import '@plasmicapp/react-web/lib/plasmic.css';

import plasmic_antd_5_hostless_css from '../antd_5_hostless/plasmic_antd_5_hostless.module.css'; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from './plasmic_arturel.module.css'; // plasmic-import: dgFPhDvLY4vKuXTDNeS2uD/projectcss
import sty from './PlasmicGbrFrameTool.module.css'; // plasmic-import: EtaPIGcLwHv0/css

createPlasmicElementProxy;

export type PlasmicGbrFrameTool__VariantMembers = {};
export type PlasmicGbrFrameTool__VariantsArgs = {};
type VariantPropType = keyof PlasmicGbrFrameTool__VariantsArgs;
export const PlasmicGbrFrameTool__VariantProps = new Array<VariantPropType>();

export type PlasmicGbrFrameTool__ArgsType = {
  clearFrames?: () => void;
  generateFrames?: (
    cellSizeX: number,
    cellSizeY: number,
    cellCountX: number,
    cellCountY: number
  ) => void;
};
type ArgPropType = keyof PlasmicGbrFrameTool__ArgsType;
export const PlasmicGbrFrameTool__ArgProps = new Array<ArgPropType>(
  'clearFrames',
  'generateFrames'
);

export type PlasmicGbrFrameTool__OverridesType = {
  root?: p.Flex<'div'>;
  cellX?: p.Flex<typeof AntdInputNumber>;
  cellY?: p.Flex<typeof AntdInputNumber>;
  cellCountX?: p.Flex<typeof AntdInputNumber>;
  cellCountY?: p.Flex<typeof AntdInputNumber>;
  dropdown?: p.Flex<typeof AntdDropdown>;
};

export interface DefaultGbrFrameToolProps {
  clearFrames?: () => void;
  generateFrames?: (
    cellSizeX: number,
    cellSizeY: number,
    cellCountX: number,
    cellCountY: number
  ) => void;
  className?: string;
}

const $$ = {};

function PlasmicGbrFrameTool__RenderFunc(props: {
  variants: PlasmicGbrFrameTool__VariantsArgs;
  args: PlasmicGbrFrameTool__ArgsType;
  overrides: PlasmicGbrFrameTool__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: 'cellX.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 6000,
      },
      {
        path: 'cellY.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 6000,
      },
      {
        path: 'cellCountX.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 3,
      },
      {
        path: 'cellCountY.value',
        type: 'private',
        variableType: 'text',
        initFunc: ({ $props, $state, $queries, $ctx }) => 2,
      },
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs,
  });

  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ksXki)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wxOQt
          )}
        >
          {'Cell size X'}
        </div>
        <AntdInputNumber
          data-plasmic-name={'cellX'}
          data-plasmic-override={overrides.cellX}
          className={classNames('__wab_instance', sty.cellX)}
          min={100}
          onChange={p.generateStateOnChangeProp($state, ['cellX', 'value'])}
          value={p.generateStateValueProp($state, ['cellX', 'value'])}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__vyMa)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__f70Oa
          )}
        >
          {'Cell size Y'}
        </div>
        <AntdInputNumber
          data-plasmic-name={'cellY'}
          data-plasmic-override={overrides.cellY}
          className={classNames('__wab_instance', sty.cellY)}
          min={100}
          onChange={p.generateStateOnChangeProp($state, ['cellY', 'value'])}
          step={1}
          value={p.generateStateValueProp($state, ['cellY', 'value'])}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__vgo31)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__zwMsG
          )}
        >
          {'Cell count X'}
        </div>
        <AntdInputNumber
          data-plasmic-name={'cellCountX'}
          data-plasmic-override={overrides.cellCountX}
          className={classNames('__wab_instance', sty.cellCountX)}
          max={20}
          min={1}
          onChange={p.generateStateOnChangeProp($state, [
            'cellCountX',
            'value',
          ])}
          step={1}
          value={p.generateStateValueProp($state, ['cellCountX', 'value'])}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__aox9G)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jdqei
          )}
        >
          {'Cell count Y'}
        </div>
        <AntdInputNumber
          data-plasmic-name={'cellCountY'}
          data-plasmic-override={overrides.cellCountY}
          className={classNames('__wab_instance', sty.cellCountY)}
          max={20}
          min={1}
          onChange={p.generateStateOnChangeProp($state, [
            'cellCountY',
            'value',
          ])}
          step={1}
          value={p.generateStateValueProp($state, ['cellCountY', 'value'])}
        />
      </div>
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__zu7Yw)}
      >
        <AntdButton
          className={classNames('__wab_instance', sty.button__qhRjI)}
          onClick={async () => {
            const $steps = {};
            $steps['runGenerateFrames'] = true
              ? (() => {
                  const actionArgs = {
                    eventRef: $props['generateFrames'],
                    args: [
                      (() => {
                        try {
                          return $state.cellX.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === 'PlasmicUndefinedDataError'
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return $state.cellY.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === 'PlasmicUndefinedDataError'
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return $state.cellCountX.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === 'PlasmicUndefinedDataError'
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      (() => {
                        try {
                          return $state.cellCountY.value;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === 'PlasmicUndefinedDataError'
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                    ],
                  };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              typeof $steps['runGenerateFrames'] === 'object' &&
              typeof $steps['runGenerateFrames'].then === 'function'
            ) {
              $steps['runGenerateFrames'] = await $steps['runGenerateFrames'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__la4S
            )}
          >
            {'Generate Frames'}
          </div>
        </AntdButton>
        <AntdButton
          className={classNames('__wab_instance', sty.button___0KBea)}
          onClick={async () => {
            const $steps = {};
            $steps['runClearFrames'] = true
              ? (() => {
                  const actionArgs = { eventRef: $props['clearFrames'] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              typeof $steps['runClearFrames'] === 'object' &&
              typeof $steps['runClearFrames'].then === 'function'
            ) {
              $steps['runClearFrames'] = await $steps['runClearFrames'];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__agpPe
            )}
          >
            {'clear'}
          </div>
        </AntdButton>
      </p.Stack>
      <div className={classNames(projectcss.all, sty.freeBox__a48Xo)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lbccM
          )}
        >
          {'Enter some text'}
        </div>
        <AntdDropdown
          data-plasmic-name={'dropdown'}
          data-plasmic-override={overrides.dropdown}
          className={classNames('__wab_instance', sty.dropdown)}
          dropdownMenuScopeClassName={sty['dropdown__dropdownMenu']}
          menuItems={() => (
            <React.Fragment>
              <AntdMenuItem
                className={classNames('__wab_instance', sty.menuItem__b2OmW)}
                key={'menu-item-1'}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__n2Qkr
                  )}
                >
                  {'Menu item'}
                </div>
              </AntdMenuItem>
              <AntdMenuItem
                className={classNames('__wab_instance', sty.menuItem__bpsEx)}
                key={'menu-item-2'}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zPx07
                  )}
                >
                  {'Menu item'}
                </div>
              </AntdMenuItem>
            </React.Fragment>
          )}
          menuItemsJson={(() => {
            const __composite = [
              { type: 'item', value: 'action1', label: null },
              { type: 'item', value: 'action2', label: null },
              { type: 'item', label: null },
            ];
            __composite['0']['label'] = 'X before Y';
            __composite['1']['label'] = 'Y before X';
            __composite['2']['label'] = 'Fastest (KNN)';
            return __composite;
          })()}
        >
          <AntdButton
            className={classNames('__wab_instance', sty.button___7JSg)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sFyF3
              )}
            >
              {'Dropdown'}
            </div>
          </AntdButton>
        </AntdDropdown>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ['root', 'cellX', 'cellY', 'cellCountX', 'cellCountY', 'dropdown'],
  cellX: ['cellX'],
  cellY: ['cellY'],
  cellCountX: ['cellCountX'],
  cellCountY: ['cellCountY'],
  dropdown: ['dropdown'],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: 'div';
  cellX: typeof AntdInputNumber;
  cellY: typeof AntdInputNumber;
  cellCountX: typeof AntdInputNumber;
  cellCountY: typeof AntdInputNumber;
  dropdown: typeof AntdDropdown;
};

type ReservedPropsType = 'variants' | 'args' | 'overrides';
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGbrFrameTool__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGbrFrameTool__VariantsArgs;
    args?: PlasmicGbrFrameTool__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGbrFrameTool__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicGbrFrameTool__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGbrFrameTool__ArgProps,
          internalVariantPropNames: PlasmicGbrFrameTool__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicGbrFrameTool__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicGbrFrameTool';
  } else {
    func.displayName = `PlasmicGbrFrameTool.${nodeName}`;
  }
  return func;
}

export const PlasmicGbrFrameTool = Object.assign(
  // Top-level PlasmicGbrFrameTool renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    cellX: makeNodeComponent('cellX'),
    cellY: makeNodeComponent('cellY'),
    cellCountX: makeNodeComponent('cellCountX'),
    cellCountY: makeNodeComponent('cellCountY'),
    dropdown: makeNodeComponent('dropdown'),

    // Metadata about props expected for PlasmicGbrFrameTool
    internalVariantProps: PlasmicGbrFrameTool__VariantProps,
    internalArgProps: PlasmicGbrFrameTool__ArgProps,
  }
);

export default PlasmicGbrFrameTool;
/* prettier-ignore-end */
