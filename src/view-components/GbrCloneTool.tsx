// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from 'react';
import {
  PlasmicGbrCloneTool,
  DefaultGbrCloneToolProps
} from './plasmic/arturel/PlasmicGbrCloneTool';
import { HTMLElementRefOf } from '@plasmicapp/react-web';
import { GbrDataModel } from '../renderer/models/GbrDataModel';

export interface CloneInfo {
  cx: number;
  cy: number;
  px: number;
  py: number;
}

export interface GbrCloneToolProps extends DefaultGbrCloneToolProps {
  nodeData?: GbrDataModel;
  cloneItems: (cloneInfo: CloneInfo) => void;
}


function GbrCloneTool_(props: GbrCloneToolProps, ref: HTMLElementRefOf<'div'>) {
  const [cloneInfo, setCloneInfo] = React.useState<CloneInfo>({
    cy: 0,
    cx: 0,
    py: 0,
    px: 0
  });


  return <PlasmicGbrCloneTool root={{ ref }} onChange={(cx, cy, px, py) => {
    console.log(`## [GbrCloneTool] cx:${cx}, cy:${cy} | `);
    // setCloneInfo({
    //   cx: cx ?? cloneInfo.cx,
    //   cy: cy ?? cloneInfo.cy,
    // })
    props.cloneItems(
      {
        cx: cx ?? cloneInfo.cx,
        cy: cy ?? cloneInfo.cy,
        px: px ?? cloneInfo.px,
        py: py ?? cloneInfo.py
      }
    );
  }} clone={() => {
    // props.cloneItems(cloneInfo);
  }} clear={() => {
    props.clear && props.clear();
  }}
  nClone={(cx, cy, px, py) => {
    props.cloneItems({
      cx,
      cy,
      px,
      py
    });
  }}
  />;
}

const GbrCloneTool = React.forwardRef(GbrCloneTool_);
export default GbrCloneTool;
